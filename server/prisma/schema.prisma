// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  CANCELED
}

enum StockStatus {
  INSTOCK
  OUTOFSTOCK
}

enum PaymentMethod {
  KPAY
  WAVEPAY
  PAYPAL
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(20)
  email        String        @unique @db.VarChar(25)
  password     String        @db.VarChar(100)
  role         Role          @default(CUSTOMER)
  phoneNumber  String        @unique @db.VarChar(15)
  orders       Order[]
  shoppingCart ShoppingCart?
  profile      Profile?
  refreshToken String        @default("")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt()
}

// unconfirm table
model Profile {
  id         Int      @id @default(autoincrement())
  bio        String   @db.VarChar(100)
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique
}

model Images {
  id        Int     @id @default(autoincrement())
  image     String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Supplier {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(25)
  phone    String    @db.VarChar(20)
  email    String    @unique @db.VarChar(25)
  products Product[]
}

model Product {
  id                Int            @id @default(autoincrement())
  sku               String         @db.VarChar(25)
  name              String         @db.VarChar(25)
  description       String
  brand             String         @db.VarChar(25)
  categoryId        Int
  category          Category       @relation(fields: [categoryId], references: [id])
  costPrice         String         @db.VarChar(20)
  sellPrice         String         @db.VarChar(20)
  images            Images[]
  quantityInStock   Int
  weight            String         @db.VarChar(10)
  size              String         @db.VarChar(25)
  color             String         @db.VarChar(25)
  material          String         @db.VarChar(25)
  expirationDate    String         @db.VarChar(15)
  warehouseLocation String         @db.VarChar(50)
  stockStatus       StockStatus    @default(INSTOCK)
  width             String         @db.VarChar(10)
  height            String         @db.VarChar(10)
  length            String         @db.VarChar(10)
  supplierId        Int
  supplier          Supplier       @relation(fields: [supplierId], references: [id])
  shoppingCart      ShoppingCart[]
  addedDates        DateTime
  orderItems        OrderItem[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?      @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(20)
  description String    @db.VarChar(100)
  product     Product[]
}

model ShoppingCart {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique
}

model Admin {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(20)
  email        String    @unique @db.VarChar(25)
  password     String    @db.VarChar(100)
  role         Role      @default(ADMIN)
  phoneNumber  String    @unique @db.VarChar(15)
  refreshToken String    @default("") @db.VarChar(200)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  quantity   Int
  unitPrice  Float
  totalPrice Float
  productId  Int
  product    Product @relation(fields: [productId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    Int
}

model Order {
  id              Int           @id @default(autoincrement())
  orderDate       DateTime      @default(now())
  orderStatus     OrderStatus
  customerId      Int
  customer        Customer      @relation(fields: [customerId], references: [id])
  orderItems      OrderItem[]
  subtotal        Float
  discounts       Float
  taxes           Float
  shippingCost    Float
  totalAmount     Float
  shippingAddress String        @db.VarChar(100)
  paymentMethod   PaymentMethod
  orderNotes      String        @db.VarChar(100)
}

model Analyze {
  id       Int @id @default(autoincrement())
  visitors Int
}
